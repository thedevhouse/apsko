{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0","program":"C:\\Users\\Alex\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","rand","C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"getrandom_package\"","--cfg","feature=\"std\"","-C","metadata=1f395413ed6d65ab","-C","extra-filename=-1f395413ed6d65ab","--out-dir","c:\\Users\\Alex\\Documents\\GitHub\\apsko\\backend\\backend\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Alex\\Documents\\GitHub\\apsko\\backend\\backend\\target\\rls\\debug\\deps","--extern","getrandom_package=c:\\Users\\Alex\\Documents\\GitHub\\apsko\\backend\\backend\\target\\rls\\debug\\deps\\libgetrandom-25931b8ae40ab52c.rmeta","--extern","rand_chacha=c:\\Users\\Alex\\Documents\\GitHub\\apsko\\backend\\backend\\target\\rls\\debug\\deps\\librand_chacha-d5603802f74dc627.rmeta","--extern","rand_core=c:\\Users\\Alex\\Documents\\GitHub\\apsko\\backend\\backend\\target\\rls\\debug\\deps\\librand_core-2b95dc42b4af2a96.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Alex\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Alex\\Documents\\GitHub\\apsko\\backend\\backend\\target\\rls\\debug\\deps\\librand-1f395413ed6d65ab.rmeta"},"prelude":{"crate_id":{"name":"rand","disambiguator":[16756741374807384042,2681839113049925656]},"crate_root":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src","external_crates":[{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[485752663891264790,8957311619763174036]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","num":2,"id":{"name":"core","disambiguator":[18086859731710399847,10284985903167786594]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7894171165123925799,1138153282057520136]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13588323328630583110,6322937768936249793]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4981221114026975734,7560613652030165248]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[14761482230397314318,7759443649452366185]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9184279872459162418,17237017963472574266]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17533675247542074538,1761975124356943313]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7993782675770172864,12706040849351126287]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2821791754508214868,4424070148662641494]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[910629799165843388,8471953781625026915]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[5889018422681230134,5892037208047200338]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[2601722915210761880,4253013904849941641]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","num":14,"id":{"name":"getrandom","disambiguator":[16347361953672963962,6806661076821240449]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","num":15,"id":{"name":"cfg_if","disambiguator":[2381695989040692466,18169010530061236241]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","num":16,"id":{"name":"rand_core","disambiguator":[13888317852852961528,7802585431405602578]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\std.rs","num":17,"id":{"name":"rand_chacha","disambiguator":[15260651139381739053,14812587789104541656]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\std.rs","num":18,"id":{"name":"c2_chacha","disambiguator":[11447460528914763117,8186133651277847995]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\std.rs","num":19,"id":{"name":"lazy_static","disambiguator":[15374558905886310843,7374160862002833928]}},{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\std.rs","num":20,"id":{"name":"ppv_lite86","disambiguator":[13008089802385698713,5685171608971451567]}}],"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":408,"byte_end":22535,"line_start":10,"line_end":719,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":16,"index":131},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":2849,"byte_end":2856,"line_start":94,"line_end":94,"column_start":21,"column_end":28},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":136},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":2858,"byte_end":2867,"line_start":94,"line_end":94,"column_start":30,"column_end":39},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":137},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":2869,"byte_end":2880,"line_start":94,"line_end":94,"column_start":41,"column_end":52},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":16,"index":166},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":2882,"byte_end":2887,"line_start":94,"line_end":94,"column_start":54,"column_end":59},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":2960,"byte_end":2970,"line_start":97,"line_end":97,"column_start":52,"column_end":62},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1614},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":27382,"byte_end":27394,"line_start":107,"line_end":107,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":960},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":27434,"byte_end":27441,"line_start":108,"line_end":108,"column_start":39,"column_end":46},"alias_span":null,"name":"Uniform","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1538},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":27465,"byte_end":27477,"line_start":109,"line_end":109,"column_start":23,"column_end":35},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1545},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":27479,"byte_end":27485,"line_start":109,"line_end":109,"column_start":37,"column_end":43},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1243},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":27514,"byte_end":27523,"line_start":110,"line_end":110,"column_start":27,"column_end":36},"alias_span":null,"name":"Bernoulli","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":27525,"byte_end":27539,"line_start":110,"line_end":110,"column_start":38,"column_end":52},"alias_span":null,"name":"BernoulliError","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1320},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":27591,"byte_end":27604,"line_start":111,"line_end":111,"column_start":50,"column_end":63},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1330},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":27606,"byte_end":27619,"line_start":111,"line_end":111,"column_start":65,"column_end":78},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1348},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":27761,"byte_end":27778,"line_start":115,"line_end":115,"column_start":50,"column_end":67},"alias_span":null,"name":"UnitSphereSurface","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1355},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":27850,"byte_end":27860,"line_start":117,"line_end":117,"column_start":50,"column_end":60},"alias_span":null,"name":"UnitCircle","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1362},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":27927,"byte_end":27932,"line_start":119,"line_end":119,"column_start":45,"column_end":50},"alias_span":null,"name":"Gamma","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1401},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":27934,"byte_end":27944,"line_start":119,"line_end":119,"column_start":52,"column_end":62},"alias_span":null,"name":"ChiSquared","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1419},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":27946,"byte_end":27953,"line_start":119,"line_end":119,"column_start":64,"column_end":71},"alias_span":null,"name":"FisherF","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1428},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":27959,"byte_end":27967,"line_start":120,"line_end":120,"column_start":5,"column_end":13},"alias_span":null,"name":"StudentT","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1436},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":27969,"byte_end":27973,"line_start":120,"line_end":120,"column_start":15,"column_end":19},"alias_span":null,"name":"Beta","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1451},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":28042,"byte_end":28048,"line_start":122,"line_end":122,"column_start":46,"column_end":52},"alias_span":null,"name":"Normal","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1459},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":28050,"byte_end":28059,"line_start":122,"line_end":122,"column_start":54,"column_end":63},"alias_span":null,"name":"LogNormal","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1444},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":28061,"byte_end":28075,"line_start":122,"line_end":122,"column_start":65,"column_end":79},"alias_span":null,"name":"StandardNormal","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1473},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":28149,"byte_end":28152,"line_start":124,"line_end":124,"column_start":51,"column_end":54},"alias_span":null,"name":"Exp","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1466},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":28154,"byte_end":28158,"line_start":124,"line_end":124,"column_start":56,"column_end":60},"alias_span":null,"name":"Exp1","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1480},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":28226,"byte_end":28232,"line_start":126,"line_end":126,"column_start":45,"column_end":51},"alias_span":null,"name":"Pareto","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1488},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":28300,"byte_end":28307,"line_start":128,"line_end":128,"column_start":46,"column_end":53},"alias_span":null,"name":"Poisson","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1499},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":28376,"byte_end":28384,"line_start":130,"line_end":130,"column_start":47,"column_end":55},"alias_span":null,"name":"Binomial","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1507},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":28451,"byte_end":28457,"line_start":132,"line_end":132,"column_start":45,"column_end":51},"alias_span":null,"name":"Cauchy","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1515},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":28527,"byte_end":28536,"line_start":134,"line_end":134,"column_start":48,"column_end":57},"alias_span":null,"name":"Dirichlet","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1521},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":28607,"byte_end":28617,"line_start":136,"line_end":136,"column_start":49,"column_end":59},"alias_span":null,"name":"Triangular","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1530},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":28685,"byte_end":28692,"line_start":138,"line_end":138,"column_start":46,"column_end":53},"alias_span":null,"name":"Weibull","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":29279,"byte_end":29288,"line_start":158,"line_end":158,"column_start":27,"column_end":36},"alias_span":null,"name":"IntoFloat","value":"","parent":{"krate":0,"index":425}},{"kind":"Use","ref_id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\prelude.rs","byte_start":239861,"byte_end":239873,"line_start":21,"line_end":21,"column_start":49,"column_end":61},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":579}},{"kind":"Use","ref_id":{"krate":0,"index":2049},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\prelude.rs","byte_start":239914,"byte_end":239920,"line_start":22,"line_end":22,"column_start":40,"column_end":46},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":579}},{"kind":"Use","ref_id":{"krate":0,"index":2056},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\prelude.rs","byte_start":240060,"byte_end":240069,"line_start":25,"line_end":25,"column_start":62,"column_end":71},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":579}},{"kind":"Use","ref_id":{"krate":0,"index":929},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\prelude.rs","byte_start":240105,"byte_end":240108,"line_start":26,"line_end":26,"column_start":35,"column_end":38},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":579}},{"kind":"Use","ref_id":{"krate":16,"index":131},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\prelude.rs","byte_start":240110,"byte_end":240117,"line_start":26,"line_end":26,"column_start":40,"column_end":47},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":579}},{"kind":"Use","ref_id":{"krate":16,"index":136},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\prelude.rs","byte_start":240119,"byte_end":240128,"line_start":26,"line_end":26,"column_start":49,"column_end":58},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":579}},{"kind":"Use","ref_id":{"krate":16,"index":137},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\prelude.rs","byte_start":240130,"byte_end":240141,"line_start":26,"line_end":26,"column_start":60,"column_end":71},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":579}},{"kind":"Use","ref_id":{"krate":0,"index":958},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\prelude.rs","byte_start":240200,"byte_end":240206,"line_start":27,"line_end":27,"column_start":57,"column_end":63},"alias_span":null,"name":"random","value":"","parent":{"krate":0,"index":579}},{"kind":"Use","ref_id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\prelude.rs","byte_start":240208,"byte_end":240218,"line_start":27,"line_end":27,"column_start":65,"column_end":75},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":579}},{"kind":"Use","ref_id":{"krate":0,"index":839},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\prelude.rs","byte_start":240260,"byte_end":240271,"line_start":28,"line_end":28,"column_start":40,"column_end":51},"alias_span":null,"name":"SliceRandom","value":"","parent":{"krate":0,"index":579}},{"kind":"Use","ref_id":{"krate":0,"index":863},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\prelude.rs","byte_start":240273,"byte_end":240287,"line_start":28,"line_end":28,"column_start":53,"column_end":67},"alias_span":null,"name":"IteratorRandom","value":"","parent":{"krate":0,"index":579}},{"kind":"Use","ref_id":{"krate":0,"index":2006},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\mod.rs","byte_start":246569,"byte_end":246576,"line_start":14,"line_end":14,"column_start":44,"column_end":51},"alias_span":null,"name":"ReadRng","value":"","parent":{"krate":0,"index":595}},{"kind":"Use","ref_id":{"krate":0,"index":2012},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\mod.rs","byte_start":246578,"byte_end":246587,"line_start":14,"line_end":14,"column_start":53,"column_end":62},"alias_span":null,"name":"ReadError","value":"","parent":{"krate":0,"index":595}},{"kind":"Use","ref_id":{"krate":0,"index":2017},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\mod.rs","byte_start":246615,"byte_end":246627,"line_start":15,"line_end":15,"column_start":26,"column_end":38},"alias_span":null,"name":"ReseedingRng","value":"","parent":{"krate":0,"index":595}},{"kind":"Use","ref_id":{"krate":0,"index":2038},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mod.rs","byte_start":245839,"byte_end":245849,"line_start":112,"line_end":112,"column_start":46,"column_end":56},"alias_span":null,"name":"EntropyRng","value":"","parent":{"krate":0,"index":594}},{"kind":"Use","ref_id":{"krate":0,"index":2049},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mod.rs","byte_start":245930,"byte_end":245936,"line_start":116,"line_end":116,"column_start":20,"column_end":26},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":594}},{"kind":"Use","ref_id":{"krate":0,"index":2056},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mod.rs","byte_start":245982,"byte_end":245991,"line_start":117,"line_end":117,"column_start":45,"column_end":54},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":594}},{"kind":"Use","ref_id":{"krate":0,"index":2068},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mod.rs","byte_start":246076,"byte_end":246081,"line_start":120,"line_end":120,"column_start":47,"column_end":52},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":594}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":408,"byte_end":22535,"line_start":10,"line_end":719,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":579},{"krate":0,"index":594},{"krate":0,"index":764},{"krate":0,"index":918},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":925},{"krate":0,"index":929},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":2122},{"krate":0,"index":2125},{"krate":0,"index":2128},{"krate":0,"index":2131},{"krate":0,"index":2134},{"krate":0,"index":2137},{"krate":0,"index":2140},{"krate":0,"index":2143},{"krate":0,"index":2146},{"krate":0,"index":2149},{"krate":0,"index":2152},{"krate":0,"index":2155},{"krate":0,"index":2158},{"krate":0,"index":2161},{"krate":0,"index":2164},{"krate":0,"index":2167},{"krate":0,"index":2170},{"krate":0,"index":2173},{"krate":0,"index":2176},{"krate":0,"index":2179},{"krate":0,"index":2182},{"krate":0,"index":2185},{"krate":0,"index":957},{"krate":0,"index":2188},{"krate":0,"index":2193},{"krate":0,"index":2198},{"krate":0,"index":2203},{"krate":0,"index":2208},{"krate":0,"index":2213},{"krate":0,"index":2218},{"krate":0,"index":2223},{"krate":0,"index":2228},{"krate":0,"index":2233},{"krate":0,"index":2238},{"krate":0,"index":2243},{"krate":0,"index":2248},{"krate":0,"index":2253},{"krate":0,"index":2258},{"krate":0,"index":2263},{"krate":0,"index":2268},{"krate":0,"index":2273},{"krate":0,"index":2278},{"krate":0,"index":2283},{"krate":0,"index":2288},{"krate":0,"index":2293},{"krate":0,"index":2298},{"krate":0,"index":2303},{"krate":0,"index":2308},{"krate":0,"index":2313},{"krate":0,"index":2318},{"krate":0,"index":2323},{"krate":0,"index":2328},{"krate":0,"index":2333},{"krate":0,"index":2338},{"krate":0,"index":2343},{"krate":0,"index":2348},{"krate":0,"index":2353},{"krate":0,"index":2358},{"krate":0,"index":2363},{"krate":0,"index":2368},{"krate":0,"index":2373},{"krate":0,"index":2378},{"krate":0,"index":2383},{"krate":0,"index":958}],"decl_id":null,"docs":" Utilities for random number generation","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":1734,"byte_end":1756,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":1757,"byte_end":1796,"line_start":49,"line_end":49,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distributions","qualname":"::distributions","value":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":129},{"krate":0,"index":140},{"krate":0,"index":229},{"krate":0,"index":241},{"krate":0,"index":253},{"krate":0,"index":297},{"krate":0,"index":320},{"krate":0,"index":338},{"krate":0,"index":348},{"krate":0,"index":359},{"krate":0,"index":374},{"krate":0,"index":383},{"krate":0,"index":394},{"krate":0,"index":404},{"krate":0,"index":414},{"krate":0,"index":425},{"krate":0,"index":427},{"krate":0,"index":460},{"krate":0,"index":494},{"krate":0,"index":543},{"krate":0,"index":556},{"krate":0,"index":562},{"krate":0,"index":1987},{"krate":0,"index":1994},{"krate":0,"index":568},{"krate":0,"index":575},{"krate":0,"index":1999},{"krate":0,"index":2004},{"krate":0,"index":2003},{"krate":0,"index":2001}],"decl_id":null,"docs":" Generating random samples from probability distributions","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uniform","qualname":"::distributions::uniform","value":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":960},{"krate":0,"index":968},{"krate":0,"index":966},{"krate":0,"index":963},{"krate":0,"index":70},{"krate":0,"index":78},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":971},{"krate":0,"index":981},{"krate":0,"index":979},{"krate":0,"index":976},{"krate":0,"index":114},{"krate":0,"index":984},{"krate":0,"index":986},{"krate":0,"index":1000},{"krate":0,"index":1002},{"krate":0,"index":1016},{"krate":0,"index":1018},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1080},{"krate":0,"index":1082},{"krate":0,"index":1096},{"krate":0,"index":1098},{"krate":0,"index":1112},{"krate":0,"index":1114},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1144},{"krate":0,"index":1146},{"krate":0,"index":1160},{"krate":0,"index":1162},{"krate":0,"index":1176},{"krate":0,"index":1185},{"krate":0,"index":1183},{"krate":0,"index":1180},{"krate":0,"index":115},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1204},{"krate":0,"index":1206},{"krate":0,"index":1220},{"krate":0,"index":1226},{"krate":0,"index":1225},{"krate":0,"index":1223},{"krate":0,"index":1228},{"krate":0,"index":1241},{"krate":0,"index":1240},{"krate":0,"index":1238},{"krate":0,"index":116},{"krate":0,"index":118}],"decl_id":null,"docs":" A distribution uniformly sampling numbers within a given range.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":960},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":43763,"byte_end":43770,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"Uniform","qualname":"::distributions::uniform::Uniform","value":"Uniform {  }","parent":null,"children":[{"krate":0,"index":962}],"decl_id":null,"docs":" Sample values uniformly between two bounds.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":43752,"byte_end":43815,"line_start":169,"line_end":171,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":44020,"byte_end":44023,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"new","qualname":"<Uniform<X>>::new","value":"fn <B1, B2> (low: B1, high: B2) -> Uniform<X>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the half\n open range `[low, high)` (excluding `high`). Panics if `low >= high`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":44373,"byte_end":44386,"line_start":185,"line_end":185,"column_start":12,"column_end":25},"name":"new_inclusive","qualname":"<Uniform<X>>::new_inclusive","value":"fn <B1, B2> (low: B1, high: B2) -> Uniform<X>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the closed\n range `[low, high]` (inclusive). Panics if `low > high`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":45047,"byte_end":45060,"line_start":206,"line_end":206,"column_start":11,"column_end":24},"name":"SampleUniform","qualname":"::distributions::uniform::SampleUniform","value":"SampleUniform: Sized","parent":null,"children":[{"krate":0,"index":83}],"decl_id":null,"docs":" Helper trait for creating objects using the correct implementation of\n [`UniformSampler`] for the sampling type.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":45144,"byte_end":45151,"line_start":208,"line_end":208,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::distributions::uniform::SampleUniform::Sampler","value":"type Sampler: UniformSampler<X = Self>;","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" The `UniformSampler` implementation supporting type `X`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":45626,"byte_end":45640,"line_start":221,"line_end":221,"column_start":11,"column_end":25},"name":"UniformSampler","qualname":"::distributions::uniform::UniformSampler","value":"UniformSampler: Sized","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":94}],"decl_id":null,"docs":" Helper trait handling actual uniform sampling.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":45708,"byte_end":45709,"line_start":223,"line_end":223,"column_start":10,"column_end":11},"name":"X","qualname":"::distributions::uniform::UniformSampler::X","value":"type X;","parent":{"krate":0,"index":84},"children":[],"decl_id":null,"docs":" The type sampled by this implementation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":45972,"byte_end":45975,"line_start":230,"line_end":230,"column_start":8,"column_end":11},"name":"new","qualname":"::distributions::uniform::UniformSampler::new","value":"fn <B1, B2> (low: B1, high: B2) -> Self","parent":{"krate":0,"index":84},"children":[],"decl_id":null,"docs":" Construct self, with inclusive lower bound and exclusive upper bound\n `[low, high)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":46350,"byte_end":46363,"line_start":239,"line_end":239,"column_start":8,"column_end":21},"name":"new_inclusive","qualname":"::distributions::uniform::UniformSampler::new_inclusive","value":"fn <B1, B2> (low: B1, high: B2) -> Self","parent":{"krate":0,"index":84},"children":[],"decl_id":null,"docs":" Construct self, with inclusive bounds `[low, high]`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":46529,"byte_end":46535,"line_start":244,"line_end":244,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::uniform::UniformSampler::sample","value":"fn <R> (&self, rng: &mut R) -> Self::X","parent":{"krate":0,"index":84},"children":[],"decl_id":null,"docs":" Sample a value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":47030,"byte_end":47043,"line_start":254,"line_end":254,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::UniformSampler::sample_single","value":"fn <R, B1, B2> (low: B1, high: B2, rng: &mut R) -> Self::X","parent":{"krate":0,"index":84},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and exclusive upper bound `[low, high)`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":47894,"byte_end":47906,"line_start":281,"line_end":281,"column_start":11,"column_end":23},"name":"SampleBorrow","qualname":"::distributions::uniform::SampleBorrow","value":"SampleBorrow<Borrowed>","parent":null,"children":[{"krate":0,"index":106}],"decl_id":null,"docs":" Helper trait similar to [`Borrow`] but implemented\n only for SampleUniform and references to SampleUniform in\n order to resolve ambiguity issues.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":48060,"byte_end":48066,"line_start":285,"line_end":285,"column_start":8,"column_end":14},"name":"borrow","qualname":"::distributions::uniform::SampleBorrow::borrow","value":"fn (&self) -> &Borrowed","parent":{"krate":0,"index":104},"children":[],"decl_id":null,"docs":" Immutably borrows from an owned value. See [`Borrow::borrow`]","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":971},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":50463,"byte_end":50473,"line_start":336,"line_end":336,"column_start":12,"column_end":22},"name":"UniformInt","qualname":"::distributions::uniform::UniformInt","value":"UniformInt {  }","parent":null,"children":[{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for integer types.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":50452,"byte_end":50579,"line_start":336,"line_end":340,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1176},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":62440,"byte_end":62452,"line_start":632,"line_end":632,"column_start":12,"column_end":24},"name":"UniformFloat","qualname":"::distributions::uniform::UniformFloat","value":"UniformFloat {  }","parent":null,"children":[{"krate":0,"index":1178},{"krate":0,"index":1179}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for floating-point types.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":62429,"byte_end":62485,"line_start":632,"line_end":635,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1220},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":70391,"byte_end":70406,"line_start":814,"line_end":814,"column_start":12,"column_end":27},"name":"UniformDuration","qualname":"::distributions::uniform::UniformDuration","value":"UniformDuration {  }","parent":null,"children":[{"krate":0,"index":1221},{"krate":0,"index":1222}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `Duration`.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":70380,"byte_end":70458,"line_start":814,"line_end":817,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1243},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\bernoulli.rs","byte_start":88555,"byte_end":88564,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"Bernoulli","qualname":"::distributions::bernoulli::Bernoulli","value":"Bernoulli {  }","parent":null,"children":[{"krate":0,"index":1244}],"decl_id":null,"docs":" The Bernoulli distribution.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\bernoulli.rs","byte_start":88544,"byte_end":88649,"line_start":34,"line_end":37,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1251},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\bernoulli.rs","byte_start":90037,"byte_end":90055,"line_start":68,"line_end":68,"column_start":5,"column_end":23},"name":"InvalidProbability","qualname":"::distributions::bernoulli::BernoulliError::InvalidProbability","value":"BernoulliError::InvalidProbability","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":" `p < 0` or `p > 1`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\bernoulli.rs","byte_start":89988,"byte_end":90002,"line_start":66,"line_end":66,"column_start":10,"column_end":24},"name":"BernoulliError","qualname":"::distributions::bernoulli::BernoulliError","value":"BernoulliError::{InvalidProbability}","parent":null,"children":[{"krate":0,"index":1251}],"decl_id":null,"docs":" Error type returned from `Bernoulli::new`.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\bernoulli.rs","byte_start":89979,"byte_end":90058,"line_start":66,"line_end":69,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\bernoulli.rs","byte_start":89979,"byte_end":90058,"line_start":66,"line_end":69,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\bernoulli.rs","byte_start":90600,"byte_end":90603,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<Bernoulli>::new","value":"fn (p: f64) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the given probability of success `p`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\bernoulli.rs","byte_start":90579,"byte_end":90588,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\bernoulli.rs","byte_start":91295,"byte_end":91305,"line_start":98,"line_end":98,"column_start":12,"column_end":22},"name":"from_ratio","qualname":"<Bernoulli>::from_ratio","value":"fn (numerator: u32, denominator: u32) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the probability of success of\n `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\bernoulli.rs","byte_start":91274,"byte_end":91283,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weighted","qualname":"::distributions::weighted","value":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":1320},{"krate":0,"index":1327},{"krate":0,"index":1324},{"krate":0,"index":211},{"krate":0,"index":216},{"krate":0,"index":1330},{"krate":0,"index":1346},{"krate":0,"index":1344},{"krate":0,"index":1343},{"krate":0,"index":1341},{"krate":0,"index":1339},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":227}],"decl_id":null,"docs":" Weighted index sampling\n \n This module provides two implementations for sampling indices:\n \n *   [`WeightedIndex`] allows `O(log N)` sampling\n *   [`alias_method::WeightedIndex`] allows `O(1)` sampling, but with\n      much greater set-up cost\n      \n [`alias_method::WeightedIndex`]: alias_method/struct.WeightedIndex.html\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":28727,"byte_end":28750,"line_start":142,"line_end":142,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"alias_method","qualname":"::distributions::weighted::alias_method","value":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":164},{"krate":0,"index":182},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":1262},{"krate":0,"index":1267},{"krate":0,"index":1272},{"krate":0,"index":1276},{"krate":0,"index":1280},{"krate":0,"index":1284},{"krate":0,"index":1288},{"krate":0,"index":1292},{"krate":0,"index":1296},{"krate":0,"index":1300},{"krate":0,"index":1304},{"krate":0,"index":1308},{"krate":0,"index":1312},{"krate":0,"index":1316}],"decl_id":null,"docs":" This module contains an implementation of alias method for sampling random\n indices with probabilities proportional to a collection of weights.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":105064,"byte_end":105077,"line_start":64,"line_end":64,"column_start":12,"column_end":25},"name":"WeightedIndex","qualname":"::distributions::weighted::alias_method::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163}],"decl_id":null,"docs":" A distribution using weighted sampling to pick a discretely selected item.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":105560,"byte_end":105563,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedIndex<W>>::new","value":"fn (weights: Vec<W>) -> Result<Self, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`WeightedIndex`].","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112137,"byte_end":112143,"line_start":272,"line_end":272,"column_start":11,"column_end":17},"name":"Weight","qualname":"::distributions::weighted::alias_method::Weight","value":"Weight: Sized + Copy + SampleUniform + PartialOrd + Add<Output = Self> + AddAssign +\nSub<Output = Self> + SubAssign + Mul<Output = Self> + MulAssign + Div<Output =\nSelf> + DivAssign + Sum","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196}],"decl_id":null,"docs":" Trait that must be implemented for weights, that are used with\n [`WeightedIndex`]. Currently no guarantees on the correctness of\n [`WeightedIndex`] are given for custom implementations of this trait.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112437,"byte_end":112440,"line_start":288,"line_end":288,"column_start":11,"column_end":14},"name":"MAX","qualname":"::distributions::weighted::alias_method::Weight::MAX","value":"Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Maximum number representable by `Self`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112502,"byte_end":112506,"line_start":291,"line_end":291,"column_start":11,"column_end":15},"name":"ZERO","qualname":"::distributions::weighted::alias_method::Weight::ZERO","value":"Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Element of `Self` equivalent to 0.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112703,"byte_end":112721,"line_start":296,"line_end":296,"column_start":8,"column_end":26},"name":"try_from_u32_lossy","qualname":"::distributions::weighted::alias_method::Weight::try_from_u32_lossy","value":"fn (n: u32) -> Option<Self>","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Produce an instance of `Self` from a `u32` value, or return `None` if\n out of range. Loss of precision (where `Self` is a floating point type)\n is acceptable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112798,"byte_end":112801,"line_start":299,"line_end":299,"column_start":8,"column_end":11},"name":"sum","qualname":"::distributions::weighted::alias_method::Weight::sum","value":"fn (values: &[Self]) -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Sums all values in slice `values`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1320},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":96834,"byte_end":96847,"line_start":85,"line_end":85,"column_start":12,"column_end":25},"name":"WeightedIndex","qualname":"::distributions::weighted::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1323}],"decl_id":null,"docs":" A distribution using weighted sampling to pick a discretely selected\n item.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":97400,"byte_end":97403,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedIndex<X>>::new","value":"fn <I> (weights: I) -> Result<WeightedIndex<X>, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new a `WeightedIndex` [`Distribution`] using the values\n in `weights`. The weights can use any type `X` for which an\n implementation of [`Uniform<X>`] exists.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1331},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":101491,"byte_end":101497,"line_start":210,"line_end":210,"column_start":5,"column_end":11},"name":"NoItem","qualname":"::distributions::weighted::WeightedError::NoItem","value":"WeightedError::NoItem","parent":{"krate":0,"index":1330},"children":[],"decl_id":null,"docs":" The provided weight collection contains no items.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1333},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":101612,"byte_end":101625,"line_start":214,"line_end":214,"column_start":5,"column_end":18},"name":"InvalidWeight","qualname":"::distributions::weighted::WeightedError::InvalidWeight","value":"WeightedError::InvalidWeight","parent":{"krate":0,"index":1330},"children":[],"decl_id":null,"docs":" A weight is either less than zero, greater than the supported maximum or\n otherwise invalid.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1335},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":101694,"byte_end":101708,"line_start":217,"line_end":217,"column_start":5,"column_end":19},"name":"AllWeightsZero","qualname":"::distributions::weighted::WeightedError::AllWeightsZero","value":"WeightedError::AllWeightsZero","parent":{"krate":0,"index":1330},"children":[],"decl_id":null,"docs":" All items in the provided weight collection are zero.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1337},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":101790,"byte_end":101797,"line_start":220,"line_end":220,"column_start":5,"column_end":12},"name":"TooMany","qualname":"::distributions::weighted::WeightedError::TooMany","value":"WeightedError::TooMany","parent":{"krate":0,"index":1330},"children":[],"decl_id":null,"docs":" Too many weights are provided (length greater than `u32::MAX`)\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1330},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":101413,"byte_end":101426,"line_start":208,"line_end":208,"column_start":10,"column_end":23},"name":"WeightedError","qualname":"::distributions::weighted::WeightedError","value":"WeightedError::{NoItem, InvalidWeight, AllWeightsZero, TooMany}","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1333},{"krate":0,"index":1335},{"krate":0,"index":1337}],"decl_id":null,"docs":" Error type returned from `WeightedIndex::new`.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":101404,"byte_end":101800,"line_start":208,"line_end":221,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":101404,"byte_end":101800,"line_start":208,"line_end":221,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1348},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_sphere.rs","byte_start":119748,"byte_end":119765,"line_start":23,"line_end":23,"column_start":12,"column_end":29},"name":"UnitSphereSurface","qualname":"::distributions::unit_sphere::UnitSphereSurface","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples uniformly from the surface of the unit sphere in three dimensions.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_sphere.rs","byte_start":119644,"byte_end":119706,"line_start":21,"line_end":21,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_sphere.rs","byte_start":119737,"byte_end":119766,"line_start":23,"line_end":23,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_sphere.rs","byte_start":119876,"byte_end":119879,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<UnitSphereSurface>::new","value":"fn () -> UnitSphereSurface","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnitSphereSurface` distribution.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_sphere.rs","byte_start":119855,"byte_end":119864,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1355},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_circle.rs","byte_start":122946,"byte_end":122956,"line_start":24,"line_end":24,"column_start":12,"column_end":22},"name":"UnitCircle","qualname":"::distributions::unit_circle::UnitCircle","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples uniformly from the edge of the unit circle in two dimensions.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_circle.rs","byte_start":122842,"byte_end":122904,"line_start":22,"line_end":22,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_circle.rs","byte_start":122935,"byte_end":122957,"line_start":24,"line_end":24,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_circle.rs","byte_start":123053,"byte_end":123056,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<UnitCircle>::new","value":"fn () -> UnitCircle","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnitCircle` distribution.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_circle.rs","byte_start":123032,"byte_end":123041,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1362},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":126631,"byte_end":126636,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"Gamma","qualname":"::distributions::gamma::Gamma","value":"Gamma {  }","parent":null,"children":[{"krate":0,"index":1363}],"decl_id":null,"docs":" The Gamma distribution `Gamma(shape, scale)` distribution.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":126527,"byte_end":126589,"line_start":40,"line_end":40,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":126620,"byte_end":126661,"line_start":42,"line_end":44,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":127921,"byte_end":127924,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"new","qualname":"<Gamma>::new","value":"fn (shape: f64, scale: f64) -> Gamma","parent":null,"children":[],"decl_id":null,"docs":" Construct an object representing the `Gamma(shape, scale)`\n distribution.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":127900,"byte_end":127909,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1401},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":130366,"byte_end":130376,"line_start":171,"line_end":171,"column_start":12,"column_end":22},"name":"ChiSquared","qualname":"::distributions::gamma::ChiSquared","value":"ChiSquared {  }","parent":null,"children":[{"krate":0,"index":1402}],"decl_id":null,"docs":" The chi-squared distribution `χ²(k)`, where `k` is the degrees of\n freedom.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":130262,"byte_end":130324,"line_start":169,"line_end":169,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":130355,"byte_end":130406,"line_start":171,"line_end":173,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":130842,"byte_end":130845,"line_start":187,"line_end":187,"column_start":12,"column_end":15},"name":"new","qualname":"<ChiSquared>::new","value":"fn (k: f64) -> ChiSquared","parent":null,"children":[],"decl_id":null,"docs":" Create a new chi-squared distribution with degrees-of-freedom\n `k`. Panics if `k < 0`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1419},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":131777,"byte_end":131784,"line_start":217,"line_end":217,"column_start":12,"column_end":19},"name":"FisherF","qualname":"::distributions::gamma::FisherF","value":"FisherF {  }","parent":null,"children":[{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422}],"decl_id":null,"docs":" The Fisher F distribution `F(m, n)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":131673,"byte_end":131735,"line_start":215,"line_end":215,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":131766,"byte_end":131966,"line_start":217,"line_end":223,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":132119,"byte_end":132122,"line_start":228,"line_end":228,"column_start":12,"column_end":15},"name":"new","qualname":"<FisherF>::new","value":"fn (m: f64, n: f64) -> FisherF","parent":null,"children":[],"decl_id":null,"docs":" Create a new `FisherF` distribution, with the given\n parameter. Panics if either `m` or `n` are not positive.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1428},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":132786,"byte_end":132794,"line_start":249,"line_end":249,"column_start":12,"column_end":20},"name":"StudentT","qualname":"::distributions::gamma::StudentT","value":"StudentT {  }","parent":null,"children":[{"krate":0,"index":1429},{"krate":0,"index":1430}],"decl_id":null,"docs":" The Student t distribution, `t(nu)`, where `nu` is the degrees of\n freedom.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":132682,"byte_end":132744,"line_start":247,"line_end":247,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":132775,"byte_end":132832,"line_start":249,"line_end":252,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":132962,"byte_end":132965,"line_start":257,"line_end":257,"column_start":12,"column_end":15},"name":"new","qualname":"<StudentT>::new","value":"fn (n: f64) -> StudentT","parent":null,"children":[],"decl_id":null,"docs":" Create a new Student t distribution with `n` degrees of\n freedom. Panics if `n <= 0`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1436},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":133527,"byte_end":133531,"line_start":275,"line_end":275,"column_start":12,"column_end":16},"name":"Beta","qualname":"::distributions::gamma::Beta","value":"Beta {  }","parent":null,"children":[{"krate":0,"index":1437},{"krate":0,"index":1438}],"decl_id":null,"docs":" The Beta distribution with shape parameters `alpha` and `beta`.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":133423,"byte_end":133485,"line_start":273,"line_end":273,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":133516,"byte_end":133575,"line_start":275,"line_end":278,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":133743,"byte_end":133746,"line_start":285,"line_end":285,"column_start":12,"column_end":15},"name":"new","qualname":"<Beta>::new","value":"fn (alpha: f64, beta: f64) -> Beta","parent":null,"children":[],"decl_id":null,"docs":" Construct an object representing the `Beta(alpha, beta)`\n distribution.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1444},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":136921,"byte_end":136935,"line_start":31,"line_end":31,"column_start":12,"column_end":26},"name":"StandardNormal","qualname":"::distributions::normal::StandardNormal","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples floating-point numbers according to the normal distribution\n `N(0, 1)` (a.k.a. a standard normal, or Gaussian). This is equivalent to\n `Normal::new(0.0, 1.0)` but faster.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":136817,"byte_end":136879,"line_start":29,"line_end":29,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":136910,"byte_end":136936,"line_start":31,"line_end":31,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1451},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":138544,"byte_end":138550,"line_start":79,"line_end":79,"column_start":12,"column_end":18},"name":"Normal","qualname":"::distributions::normal::Normal","value":"Normal {  }","parent":null,"children":[{"krate":0,"index":1452},{"krate":0,"index":1453}],"decl_id":null,"docs":" The normal distribution `N(mean, std_dev**2)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":138440,"byte_end":138502,"line_start":77,"line_end":77,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":138533,"byte_end":138587,"line_start":79,"line_end":82,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":138792,"byte_end":138795,"line_start":92,"line_end":92,"column_start":12,"column_end":15},"name":"new","qualname":"<Normal>::new","value":"fn (mean: f64, std_dev: f64) -> Normal","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Normal` distribution with the given mean and\n standard deviation.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":138771,"byte_end":138780,"line_start":91,"line_end":91,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1459},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":139426,"byte_end":139435,"line_start":114,"line_end":114,"column_start":12,"column_end":21},"name":"LogNormal","qualname":"::distributions::normal::LogNormal","value":"LogNormal {  }","parent":null,"children":[{"krate":0,"index":1460}],"decl_id":null,"docs":" The log-normal distribution `ln N(mean, std_dev**2)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":139322,"byte_end":139384,"line_start":112,"line_end":112,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":139415,"byte_end":139456,"line_start":114,"line_end":116,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":139667,"byte_end":139670,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"new","qualname":"<LogNormal>::new","value":"fn (mean: f64, std_dev: f64) -> LogNormal","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LogNormal` distribution with the given mean\n and standard deviation.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":139646,"byte_end":139655,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1466},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\exponential.rs","byte_start":142094,"byte_end":142098,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"Exp1","qualname":"::distributions::exponential::Exp1","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples floating-point numbers according to the exponential distribution,\n with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or\n sampling with `-rng.gen::<f64>().ln()`, but faster.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\exponential.rs","byte_start":141990,"byte_end":142052,"line_start":31,"line_end":31,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\exponential.rs","byte_start":142083,"byte_end":142099,"line_start":33,"line_end":33,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1473},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\exponential.rs","byte_start":143044,"byte_end":143047,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"Exp","qualname":"::distributions::exponential::Exp","value":"Exp {  }","parent":null,"children":[{"krate":0,"index":1474}],"decl_id":null,"docs":" The exponential distribution `Exp(lambda)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\exponential.rs","byte_start":142940,"byte_end":143002,"line_start":61,"line_end":61,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\exponential.rs","byte_start":143033,"byte_end":143146,"line_start":63,"line_end":66,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\exponential.rs","byte_start":143288,"byte_end":143291,"line_start":72,"line_end":72,"column_start":12,"column_end":15},"name":"new","qualname":"<Exp>::new","value":"fn (lambda: f64) -> Exp","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Exp` with the given shape parameter\n `lambda`. Panics if `lambda <= 0`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\exponential.rs","byte_start":143267,"byte_end":143276,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1480},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\pareto.rs","byte_start":144766,"byte_end":144772,"line_start":18,"line_end":18,"column_start":12,"column_end":18},"name":"Pareto","qualname":"::distributions::pareto::Pareto","value":"Pareto {  }","parent":null,"children":[{"krate":0,"index":1481},{"krate":0,"index":1482}],"decl_id":null,"docs":" Samples floating-point numbers according to the Pareto distribution\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\pareto.rs","byte_start":144662,"byte_end":144724,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\pareto.rs","byte_start":144755,"byte_end":144816,"line_start":18,"line_end":21,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\pareto.rs","byte_start":145143,"byte_end":145146,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<Pareto>::new","value":"fn (scale: f64, shape: f64) -> Pareto","parent":null,"children":[],"decl_id":null,"docs":" Construct a new Pareto distribution with given `scale` and `shape`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1488},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\poisson.rs","byte_start":146787,"byte_end":146794,"line_start":23,"line_end":23,"column_start":12,"column_end":19},"name":"Poisson","qualname":"::distributions::poisson::Poisson","value":"Poisson {  }","parent":null,"children":[{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1493}],"decl_id":null,"docs":" The Poisson distribution `Poisson(lambda)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\poisson.rs","byte_start":146683,"byte_end":146745,"line_start":21,"line_end":21,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\poisson.rs","byte_start":146776,"byte_end":146928,"line_start":23,"line_end":30,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\poisson.rs","byte_start":147064,"byte_end":147067,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Poisson>::new","value":"fn (lambda: f64) -> Poisson","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Poisson` with the given shape parameter\n `lambda`. Panics if `lambda <= 0`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1499},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\binomial.rs","byte_start":151880,"byte_end":151888,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"Binomial","qualname":"::distributions::binomial::Binomial","value":"Binomial {  }","parent":null,"children":[{"krate":0,"index":1500},{"krate":0,"index":1501}],"decl_id":null,"docs":" The binomial distribution `Binomial(n, p)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\binomial.rs","byte_start":151776,"byte_end":151838,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\binomial.rs","byte_start":151869,"byte_end":151974,"line_start":22,"line_end":27,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\binomial.rs","byte_start":152181,"byte_end":152184,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<Binomial>::new","value":"fn (n: u64, p: f64) -> Binomial","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Binomial` with the given shape parameters `n` (number\n of trials) and `p` (probability of success).","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1507},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\cauchy.rs","byte_start":163072,"byte_end":163078,"line_start":23,"line_end":23,"column_start":12,"column_end":18},"name":"Cauchy","qualname":"::distributions::cauchy::Cauchy","value":"Cauchy {  }","parent":null,"children":[{"krate":0,"index":1508},{"krate":0,"index":1509}],"decl_id":null,"docs":" The Cauchy distribution `Cauchy(median, scale)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\cauchy.rs","byte_start":162968,"byte_end":163030,"line_start":21,"line_end":21,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\cauchy.rs","byte_start":163061,"byte_end":163114,"line_start":23,"line_end":26,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\cauchy.rs","byte_start":163303,"byte_end":163306,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<Cauchy>::new","value":"fn (median: f64, scale: f64) -> Cauchy","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Cauchy` with the given shape parameters\n `median` the peak location and `scale` the scale factor.\n Panics if `scale <= 0`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1515},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\dirichlet.rs","byte_start":166395,"byte_end":166404,"line_start":24,"line_end":24,"column_start":12,"column_end":21},"name":"Dirichlet","qualname":"::distributions::dirichlet::Dirichlet","value":"Dirichlet {  }","parent":null,"children":[{"krate":0,"index":1516}],"decl_id":null,"docs":" The dirichelet distribution `Dirichlet(alpha)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\dirichlet.rs","byte_start":166297,"byte_end":166359,"line_start":22,"line_end":22,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\dirichlet.rs","byte_start":166654,"byte_end":166657,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<Dirichlet>::new","value":"fn <V> (alpha: V) -> Dirichlet","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Dirichlet` with the given alpha parameter `alpha`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\dirichlet.rs","byte_start":166633,"byte_end":166642,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\dirichlet.rs","byte_start":167071,"byte_end":167085,"line_start":53,"line_end":53,"column_start":12,"column_end":26},"name":"new_with_param","qualname":"<Dirichlet>::new_with_param","value":"fn (alpha: f64, size: usize) -> Dirichlet","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Dirichlet` with the given shape parameter `alpha` and `size`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\dirichlet.rs","byte_start":167050,"byte_end":167059,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1521},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\triangular.rs","byte_start":169505,"byte_end":169515,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"Triangular","qualname":"::distributions::triangular::Triangular","value":"Triangular {  }","parent":null,"children":[{"krate":0,"index":1522},{"krate":0,"index":1523},{"krate":0,"index":1524}],"decl_id":null,"docs":" The triangular distribution.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\triangular.rs","byte_start":169401,"byte_end":169463,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\triangular.rs","byte_start":169494,"byte_end":169562,"line_start":18,"line_end":22,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\triangular.rs","byte_start":169799,"byte_end":169802,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Triangular>::new","value":"fn (min: f64, max: f64, mode: f64) -> Triangular","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Triangular` with minimum `min`, maximum `max` and mode\n `mode`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\triangular.rs","byte_start":169778,"byte_end":169787,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1530},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weibull.rs","byte_start":171776,"byte_end":171783,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Weibull","qualname":"::distributions::weibull::Weibull","value":"Weibull {  }","parent":null,"children":[{"krate":0,"index":1531},{"krate":0,"index":1532}],"decl_id":null,"docs":" Samples floating-point numbers according to the Weibull distribution\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weibull.rs","byte_start":171672,"byte_end":171734,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weibull.rs","byte_start":171765,"byte_end":171823,"line_start":18,"line_end":21,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weibull.rs","byte_start":172025,"byte_end":172028,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<Weibull>::new","value":"fn (scale: f64, shape: f64) -> Weibull","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Weibull` distribution with given `scale` and `shape`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1538},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\float.rs","byte_start":174378,"byte_end":174390,"line_start":43,"line_end":43,"column_start":12,"column_end":24},"name":"OpenClosed01","qualname":"::distributions::float::OpenClosed01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the half-open\n interval `(0, 1]`, i.e. including 1 but not 0.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\float.rs","byte_start":174367,"byte_end":174391,"line_start":43,"line_end":43,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1545},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\float.rs","byte_start":175321,"byte_end":175327,"line_start":69,"line_end":69,"column_start":12,"column_end":18},"name":"Open01","qualname":"::distributions::float::Open01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the open\n interval `(0, 1)`, i.e. not including either endpoint.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\float.rs","byte_start":175310,"byte_end":175328,"line_start":69,"line_end":69,"column_start":1,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\float.rs","byte_start":175437,"byte_end":175446,"line_start":74,"line_end":74,"column_start":11,"column_end":20},"name":"IntoFloat","qualname":"::distributions::float::IntoFloat","value":"IntoFloat","parent":null,"children":[{"krate":0,"index":422},{"krate":0,"index":423}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":422},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\float.rs","byte_start":175458,"byte_end":175459,"line_start":75,"line_end":75,"column_start":10,"column_end":11},"name":"F","qualname":"::distributions::float::IntoFloat::F","value":"type F;","parent":{"krate":0,"index":421},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\float.rs","byte_start":175861,"byte_end":175885,"line_start":85,"line_end":85,"column_start":8,"column_end":32},"name":"into_float_with_exponent","qualname":"::distributions::float::IntoFloat::into_float_with_exponent","value":"fn (self, exponent: i32) -> Self::F","parent":{"krate":0,"index":421},"children":[],"decl_id":null,"docs":" Helper method to combine the fraction and a contant exponent into a\n float.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":29237,"byte_end":29250,"line_start":157,"line_end":157,"column_start":24,"column_end":37},"name":"hidden_export","qualname":"::distributions::hidden_export","value":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","parent":null,"children":[{"krate":0,"index":426}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1614},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\other.rs","byte_start":190419,"byte_end":190431,"line_start":37,"line_end":37,"column_start":12,"column_end":24},"name":"Alphanumeric","qualname":"::distributions::other::Alphanumeric","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample a `char`, uniformly distributed over ASCII letters and numbers:\n a-z, A-Z and 0-9.\n \n # Example","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":499},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\utils.rs","byte_start":196934,"byte_end":196940,"line_start":20,"line_end":20,"column_start":10,"column_end":16},"name":"Output","qualname":"::distributions::utils::WideningMultiply::Output","value":"type Output;","parent":{"krate":0,"index":497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\utils.rs","byte_start":204203,"byte_end":204207,"line_start":233,"line_end":233,"column_start":10,"column_end":14},"name":"Mask","qualname":"::distributions::utils::FloatSIMDUtils::Mask","value":"type Mask;","parent":{"krate":0,"index":504},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\utils.rs","byte_start":204722,"byte_end":204726,"line_start":245,"line_end":245,"column_start":10,"column_end":14},"name":"UInt","qualname":"::distributions::utils::FloatSIMDUtils::UInt","value":"type UInt;","parent":{"krate":0,"index":504},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\utils.rs","byte_start":204916,"byte_end":204920,"line_start":252,"line_end":252,"column_start":10,"column_end":14},"name":"Bits","qualname":"::distributions::utils::Float::Bits","value":"type Bits;","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":30051,"byte_end":30063,"line_start":177,"line_end":177,"column_start":11,"column_end":23},"name":"Distribution","qualname":"::distributions::Distribution","value":"Distribution<T>","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":560}],"decl_id":null,"docs":" Types (distributions) that can be used to create a random instance of `T`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":30157,"byte_end":30163,"line_start":179,"line_end":179,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::Distribution::sample","value":"fn <R> (&self, rng: &mut R) -> T","parent":{"krate":0,"index":556},"children":[],"decl_id":null,"docs":" Generate a random value of `T`, using `rng` as the source of randomness.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":31370,"byte_end":31381,"line_start":211,"line_end":211,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::distributions::Distribution::sample_iter","value":"fn <R> (self, rng: R) -> DistIter<Self, R, T>","parent":{"krate":0,"index":556},"children":[],"decl_id":null,"docs":" Create an iterator that generates random values of `T`, using `rng` as\n the source of randomness.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1987},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":32067,"byte_end":32075,"line_start":237,"line_end":237,"column_start":12,"column_end":20},"name":"DistIter","qualname":"::distributions::DistIter","value":"DistIter {  }","parent":null,"children":[{"krate":0,"index":1991},{"krate":0,"index":1992},{"krate":0,"index":1993}],"decl_id":null,"docs":" An iterator that generates random values of `T` with distribution `D`,\n using `R` as the source of randomness.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1999},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":36223,"byte_end":36231,"line_start":347,"line_end":347,"column_start":12,"column_end":20},"name":"Standard","qualname":"::distributions::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A generic random value distribution, implemented for many primitive types.\n Usually generates values with a numerically uniform distribution, and with a\n range appropriate to the type.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":36212,"byte_end":36232,"line_start":347,"line_end":347,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":579},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\prelude.rs","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":588},{"krate":0,"index":591}],"decl_id":null,"docs":" Convenience re-export of common members","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":594},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rngs","qualname":"::rngs","value":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mod.rs","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":676},{"krate":0,"index":692},{"krate":0,"index":704},{"krate":0,"index":723},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":763}],"decl_id":null,"docs":" Random number generators and adapters","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":595},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::rngs::adapter","value":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\mod.rs","parent":null,"children":[{"krate":0,"index":596},{"krate":0,"index":618},{"krate":0,"index":672},{"krate":0,"index":675}],"decl_id":null,"docs":" Wrappers / adapters forming RNGs\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2006},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\read.rs","byte_start":248113,"byte_end":248120,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"ReadRng","qualname":"::rngs::adapter::read::ReadRng","value":"ReadRng {  }","parent":null,"children":[{"krate":0,"index":2008}],"decl_id":null,"docs":" An RNG that reads random bytes straight from any type supporting\n [`std::io::Read`], for example files.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\read.rs","byte_start":248227,"byte_end":248230,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadRng<R>>::new","value":"fn (r: R) -> ReadRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReadRng` from a `Read`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2012},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\read.rs","byte_start":249059,"byte_end":249068,"line_start":83,"line_end":83,"column_start":12,"column_end":21},"name":"ReadError","qualname":"::rngs::adapter::read::ReadError","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ReadRng` error type\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2017},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":254009,"byte_end":254021,"line_start":79,"line_end":79,"column_start":12,"column_end":24},"name":"ReseedingRng","qualname":"::rngs::adapter::reseeding::ReseedingRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around any PRNG that implements [`BlockRngCore`], that adds the\n ability to reseed it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":254520,"byte_end":254523,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"new","qualname":"<ReseedingRng<R, Rsdr>>::new","value":"fn (rng: R, threshold: u64, reseeder: Rsdr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReseedingRng` from an existing PRNG, combined with a RNG\n to use as reseeder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":254708,"byte_end":254714,"line_start":98,"line_end":98,"column_start":12,"column_end":18},"name":"reseed","qualname":"<ReseedingRng<R, Rsdr>>::reseed","value":"fn (&mut self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Reseed the internal PRNG.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2038},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\entropy.rs","byte_start":264009,"byte_end":264019,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"EntropyRng","qualname":"::rngs::entropy::EntropyRng","value":"EntropyRng {  }","parent":null,"children":[{"krate":0,"index":2039}],"decl_id":null,"docs":" An interface returning random data from external source(s), provided\n specifically for securely seeding algorithmic generators (PRNGs).","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"use rngs::OsRng instead\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\entropy.rs","byte_start":263937,"byte_end":263997,"line_start":24,"line_end":24,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\entropy.rs","byte_start":264332,"byte_end":264335,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<EntropyRng>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `EntropyRng`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":692},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mock","qualname":"::rngs::mock","value":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mock.rs","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":2042},{"krate":0,"index":2047},{"krate":0,"index":2045},{"krate":0,"index":697},{"krate":0,"index":699}],"decl_id":null,"docs":" Mock random number generator\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2042},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mock.rs","byte_start":266078,"byte_end":266085,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"StepRng","qualname":"::rngs::mock::StepRng","value":"StepRng {  }","parent":null,"children":[{"krate":0,"index":2043},{"krate":0,"index":2044}],"decl_id":null,"docs":" A simple implementation of `RngCore` for testing purposes.\n \n This generates an arithmetic sequence (i.e. adds a constant each step)\n over a `u64` number, using wrapping arithmetic. If the increment is 0\n the generator yields a constant.\n \n ```\n use rand::Rng;\n use rand::rngs::mock::StepRng;\n \n let mut my_rng = StepRng::new(2, 1);\n let sample: [u64; 3] = my_rng.gen();\n assert_eq!(sample, [2, 3, 4]);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mock.rs","byte_start":266275,"byte_end":266278,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<StepRng>::new","value":"fn (initial: u64, increment: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `StepRng`, yielding an arithmetic sequence starting with\n `initial` and incremented by `increment` each time.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2049},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\std.rs","byte_start":268434,"byte_end":268440,"line_start":34,"line_end":34,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::rngs::std::StdRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient\n on the current platform, to be statistically strong and unpredictable\n (meaning a cryptographically secure PRNG).","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2056},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\thread.rs","byte_start":272688,"byte_end":272697,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"ThreadRng","qualname":"::rngs::thread::ThreadRng","value":"ThreadRng {  }","parent":null,"children":[{"krate":0,"index":2057}],"decl_id":null,"docs":" The type returned by [`thread_rng`], essentially just a reference to the\n PRNG in thread-local memory.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\thread.rs","byte_start":272677,"byte_end":272809,"line_start":57,"line_end":60,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\thread.rs","byte_start":273587,"byte_end":273597,"line_start":80,"line_end":80,"column_start":8,"column_end":18},"name":"thread_rng","qualname":"::rngs::thread::thread_rng","value":"fn () -> ThreadRng","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the lazily-initialized thread-local random number generator,\n seeded by the system. Intended to be used in method chaining style,\n e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.\n `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making\n `ThreadRng::default()` equivalent.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2068},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\os.rs","byte_start":276442,"byte_end":276447,"line_start":50,"line_end":50,"column_start":12,"column_end":17},"name":"OsRng","qualname":"::rngs::os::OsRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A random number generator that retrieves randomness from from the\n operating system.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\os.rs","byte_start":276431,"byte_end":276448,"line_start":50,"line_end":50,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\os.rs","byte_start":276591,"byte_end":276594,"line_start":55,"line_end":55,"column_start":12,"column_end":15},"name":"new","qualname":"<OsRng>::new","value":"fn () -> Result<OsRng, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `OsRng`.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\",\n             note = \"replace OsRng::new().unwrap() with just OsRng\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\os.rs","byte_start":276497,"byte_end":276579,"line_start":54,"line_end":54,"column_start":5,"column_end":87}}]},{"kind":"Mod","id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seq","qualname":"::seq","value":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","parent":null,"children":[{"krate":0,"index":765},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":839},{"krate":0,"index":863},{"krate":0,"index":870},{"krate":0,"index":901},{"krate":0,"index":2110},{"krate":0,"index":2117},{"krate":0,"index":903},{"krate":0,"index":911},{"krate":0,"index":916}],"decl_id":null,"docs":" Sequence-related functionality\n \n This module provides:\n \n *   [`seq::SliceRandom`] slice sampling and mutation\n *   [`seq::IteratorRandom`] iterator sampling\n *   [`seq::index::sample`] low-level API to choose multiple indices from\n     `0..length`\n \n Also see:\n \n *   [`distributions::weighted`] module which provides implementations of\n     weighted index sampling.\n \n In order to make results reproducible across 32-64 bit architectures, all\n `usize` indices are sampled as a `u32` where possible (also providing a\n small performance boost in some cases).\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":765},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::seq::index","value":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":774},{"krate":0,"index":2077},{"krate":0,"index":2086},{"krate":0,"index":2084},{"krate":0,"index":775},{"krate":0,"index":783},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":2088},{"krate":0,"index":2096},{"krate":0,"index":792},{"krate":0,"index":799},{"krate":0,"index":2099},{"krate":0,"index":2108},{"krate":0,"index":2106},{"krate":0,"index":801},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":816},{"krate":0,"index":819},{"krate":0,"index":821},{"krate":0,"index":824},{"krate":0,"index":827},{"krate":0,"index":830}],"decl_id":null,"docs":" Low-level API for sampling indices\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":278352,"byte_end":278375,"line_start":28,"line_end":28,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2078},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":306199,"byte_end":306202,"line_start":27,"line_end":27,"column_start":20,"column_end":23},"name":"U32","qualname":"::seq::index::IndexVec::U32","value":"IndexVec::U32(Vec<u32>)","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2081},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":306233,"byte_end":306238,"line_start":28,"line_end":28,"column_start":20,"column_end":25},"name":"USize","qualname":"::seq::index::IndexVec::USize","value":"IndexVec::USize(Vec<usize>)","parent":{"krate":0,"index":2077},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2077},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":306169,"byte_end":306177,"line_start":26,"line_end":26,"column_start":10,"column_end":18},"name":"IndexVec","qualname":"::seq::index::IndexVec","value":"IndexVec::{U32, USize}","parent":null,"children":[{"krate":0,"index":2078},{"krate":0,"index":2081}],"decl_id":null,"docs":" A vector of indices.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":306320,"byte_end":306323,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexVec>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of indices\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":306638,"byte_end":306643,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"name":"index","qualname":"<IndexVec>::index","value":"fn (&self, index: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the value at the given `index`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":306909,"byte_end":306917,"line_start":52,"line_end":52,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<IndexVec>::into_vec","value":"fn (self) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return result as a `Vec<usize>`. Conversion may or may not be trivial.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":307168,"byte_end":307172,"line_start":60,"line_end":60,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexVec>::iter","value":"fn <'a> (&'a self) -> IndexVecIter<'a>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the indices as a sequence of `usize` values\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":307476,"byte_end":307485,"line_start":68,"line_end":68,"column_start":12,"column_end":21},"name":"into_iter","qualname":"<IndexVec>::into_iter","value":"fn (self) -> IndexVecIntoIter","parent":null,"children":[],"decl_id":null,"docs":" Convert into an iterator over the indices as a sequence of `usize` values\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2090},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":308576,"byte_end":308579,"line_start":105,"line_end":105,"column_start":20,"column_end":23},"name":"U32","qualname":"::seq::index::IndexVecIter::U32","value":"IndexVecIter::U32(slice::Iter<'a, u32>)","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2093},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":308622,"byte_end":308627,"line_start":106,"line_end":106,"column_start":20,"column_end":25},"name":"USize","qualname":"::seq::index::IndexVecIter::USize","value":"IndexVecIter::USize(slice::Iter<'a, usize>)","parent":{"krate":0,"index":2088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2088},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":308538,"byte_end":308550,"line_start":104,"line_end":104,"column_start":10,"column_end":22},"name":"IndexVecIter","qualname":"::seq::index::IndexVecIter","value":"IndexVecIter::{U32, USize}","parent":null,"children":[{"krate":0,"index":2090},{"krate":0,"index":2093}],"decl_id":null,"docs":" Return type of `IndexVec::iter`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2100},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":309340,"byte_end":309343,"line_start":132,"line_end":132,"column_start":20,"column_end":23},"name":"U32","qualname":"::seq::index::IndexVecIntoIter::U32","value":"IndexVecIntoIter::U32(vec::IntoIter<u32>)","parent":{"krate":0,"index":2099},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2103},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":309384,"byte_end":309389,"line_start":133,"line_end":133,"column_start":20,"column_end":25},"name":"USize","qualname":"::seq::index::IndexVecIntoIter::USize","value":"IndexVecIntoIter::USize(vec::IntoIter<usize>)","parent":{"krate":0,"index":2099},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2099},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":309302,"byte_end":309318,"line_start":131,"line_end":131,"column_start":10,"column_end":26},"name":"IndexVecIntoIter","qualname":"::seq::index::IndexVecIntoIter","value":"IndexVecIntoIter::{U32, USize}","parent":null,"children":[{"krate":0,"index":2100},{"krate":0,"index":2103}],"decl_id":null,"docs":" Return type of `IndexVec::into_iter`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":311047,"byte_end":311053,"line_start":181,"line_end":181,"column_start":8,"column_end":14},"name":"sample","qualname":"::seq::index::sample","value":"fn <R> (rng: &mut R, length: usize, amount: usize) -> IndexVec","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` distinct indices from `0..length`, and\n return them in random order (fully shuffled).","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":839},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":279316,"byte_end":279327,"line_start":58,"line_end":58,"column_start":11,"column_end":22},"name":"SliceRandom","qualname":"::seq::SliceRandom","value":"SliceRandom","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":843},{"krate":0,"index":845},{"krate":0,"index":847},{"krate":0,"index":853},{"krate":0,"index":859},{"krate":0,"index":861}],"decl_id":null,"docs":" Extension trait on slices, providing random mutation and sampling methods.\n \n This trait is implemented on all `[T]` slice types, providing several\n methods for choosing and shuffling elements. You must `use` this trait:\n \n ```\n use rand::seq::SliceRandom;\n \n fn main() {\n     let mut rng = rand::thread_rng();\n     let mut bytes = \"Hello, random!\".to_string().into_bytes();\n     bytes.shuffle(&mut rng);\n     let str = String::from_utf8(bytes).unwrap();\n     println!(\"{}\", str);\n }\n ```\n Example output (non-deterministic):\n ```none\n l,nmroHado !le\n ```\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":840},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":279365,"byte_end":279369,"line_start":60,"line_end":60,"column_start":10,"column_end":14},"name":"Item","qualname":"::seq::SliceRandom::Item","value":"type Item;","parent":{"krate":0,"index":839},"children":[],"decl_id":null,"docs":" The element type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":279856,"byte_end":279862,"line_start":78,"line_end":78,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::SliceRandom::choose","value":"fn <R> (&self, rng: &mut R) -> Option<&Self::Item>","parent":{"krate":0,"index":839},"children":[],"decl_id":null,"docs":" Returns a reference to one random element of the slice, or `None` if the\n slice is empty.\n \n For slices, complexity is `O(1)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":280107,"byte_end":280117,"line_start":85,"line_end":85,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::seq::SliceRandom::choose_mut","value":"fn <R> (&mut self, rng: &mut R) -> Option<&mut Self::Item>","parent":{"krate":0,"index":839},"children":[],"decl_id":null,"docs":" Returns a mutable reference to one random element of the slice, or\n `None` if the slice is empty.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":281152,"byte_end":281167,"line_start":113,"line_end":113,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::SliceRandom::choose_multiple","value":"fn <R> (&self, rng: &mut R, amount: usize) -> SliceChooseIter<Self, Self::Item>","parent":{"krate":0,"index":839},"children":[],"decl_id":null,"docs":" Chooses `amount` elements from the slice at random, without repetition,\n and in random order. The returned iterator is appropriate both for\n collection into a `Vec` and filling an existing buffer (see example).","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":281119,"byte_end":281144,"line_start":112,"line_end":112,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":282310,"byte_end":282325,"line_start":140,"line_end":140,"column_start":8,"column_end":23},"name":"choose_weighted","qualname":"::seq::SliceRandom::choose_weighted","value":"fn <R, F, B, X> (&self, rng: &mut R, weight: F) -> Result<&Self::Item, WeightedError>","parent":{"krate":0,"index":839},"children":[],"decl_id":null,"docs":" Similar to [`choose`], but where the likelihood of each outcome may be\n specified.\n \n The specified function `weight` maps each item `x` to a relative\n likelihood `weight(x)`. The probability of each item being selected is\n therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":282277,"byte_end":282302,"line_start":139,"line_end":139,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":283369,"byte_end":283388,"line_start":167,"line_end":167,"column_start":8,"column_end":27},"name":"choose_weighted_mut","qualname":"::seq::SliceRandom::choose_weighted_mut","value":"fn <R, F, B, X> (&mut self, rng: &mut R, weight: F) -> Result<&mut Self::Item, WeightedError>","parent":{"krate":0,"index":839},"children":[],"decl_id":null,"docs":" Similar to [`choose_mut`], but where the likelihood of each outcome may\n be specified.\n \n The specified function `weight` maps each item `x` to a relative\n likelihood `weight(x)`. The probability of each item being selected is\n therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":283336,"byte_end":283361,"line_start":166,"line_end":166,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":284180,"byte_end":284187,"line_start":196,"line_end":196,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::seq::SliceRandom::shuffle","value":"fn <R> (&mut self, rng: &mut R) -> ()","parent":{"krate":0,"index":839},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":285052,"byte_end":285067,"line_start":216,"line_end":216,"column_start":8,"column_end":23},"name":"partial_shuffle","qualname":"::seq::SliceRandom::partial_shuffle","value":"fn <R> (&mut self, rng: &mut R, amount: usize) -> (&mut [Self::Item], &mut [Self::Item])","parent":{"krate":0,"index":839},"children":[],"decl_id":null,"docs":" Shuffle a slice in place, but exit early.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":863},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":285747,"byte_end":285761,"line_start":241,"line_end":241,"column_start":11,"column_end":25},"name":"IteratorRandom","qualname":"::seq::IteratorRandom","value":"IteratorRandom: Iterator + Sized","parent":null,"children":[{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":868}],"decl_id":null,"docs":" Extension trait on iterators, providing random sampling methods.\n \n This trait is implemented on all sized iterators, providing methods for\n choosing one or more elements. You must `use` this trait:\n \n ```\n use rand::seq::IteratorRandom;\n \n fn main() {\n     let mut rng = rand::thread_rng();\n     \n     let faces = \"😀😎😐😕😠😢\";\n     println!(\"I am {}!\", faces.chars().choose(&mut rng).unwrap());\n }\n ```\n Example output (non-deterministic):\n ```none\n I am 😀!\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":286396,"byte_end":286402,"line_start":254,"line_end":254,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::IteratorRandom::choose","value":"fn <R> (mut self, rng: &mut R) -> Option<Self::Item>","parent":{"krate":0,"index":863},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.\n \n Returns `None` if and only if the iterator is empty.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":288494,"byte_end":288514,"line_start":313,"line_end":313,"column_start":8,"column_end":28},"name":"choose_multiple_fill","qualname":"::seq::IteratorRandom::choose_multiple_fill","value":"fn <R> (mut self, rng: &mut R, buf: &mut [Self::Item]) -> usize","parent":{"krate":0,"index":863},"children":[],"decl_id":null,"docs":" Collects values at random from the iterator into a supplied buffer\n until that buffer is filled.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":289926,"byte_end":289941,"line_start":352,"line_end":352,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::IteratorRandom::choose_multiple","value":"fn <R> (mut self, rng: &mut R, amount: usize) -> Vec<Self::Item>","parent":{"krate":0,"index":863},"children":[],"decl_id":null,"docs":" Collects `amount` values at random from the iterator into a vector.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":289893,"byte_end":289918,"line_start":351,"line_end":351,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2110},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":294249,"byte_end":294264,"line_start":487,"line_end":487,"column_start":12,"column_end":27},"name":"SliceChooseIter","qualname":"::seq::SliceChooseIter","value":"SliceChooseIter {  }","parent":null,"children":[{"krate":0,"index":2114},{"krate":0,"index":2115},{"krate":0,"index":2116}],"decl_id":null,"docs":" An iterator over multiple slice elements.\n \n This struct is created by\n [`SliceRandom::choose_multiple`](trait.SliceRandom.html#tymethod.choose_multiple).\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":294195,"byte_end":294220,"line_start":485,"line_end":485,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":929},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":4772,"byte_end":4775,"line_start":148,"line_end":148,"column_start":11,"column_end":14},"name":"Rng","qualname":"::Rng","value":"Rng: RngCore","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":932},{"krate":0,"index":936},{"krate":0,"index":939},{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":946},{"krate":0,"index":947}],"decl_id":null,"docs":" An automatically-implemented extension trait on [`RngCore`] providing high-level\n generic methods for sampling values and other convenience methods.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":5925,"byte_end":5928,"line_start":184,"line_end":184,"column_start":8,"column_end":11},"name":"gen","qualname":"::Rng::gen","value":"fn <T> (&mut self) -> T","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Return a random value supporting the [`Standard`] distribution.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":5908,"byte_end":5917,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":6803,"byte_end":6812,"line_start":213,"line_end":213,"column_start":8,"column_end":17},"name":"gen_range","qualname":"::Rng::gen_range","value":"fn <T, B1, B2> (&mut self, low: B1, high: B2) -> T","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Generate a random value in the range [`low`, `high`), i.e. inclusive of\n `low` and exclusive of `high`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":7502,"byte_end":7508,"line_start":235,"line_end":235,"column_start":8,"column_end":14},"name":"sample","qualname":"::Rng::sample","value":"fn <T, D> (&mut self, distr: D) -> T","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Sample a new value, using the given distribution.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":8822,"byte_end":8833,"line_start":272,"line_end":272,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::Rng::sample_iter","value":"fn <T, D> (self, distr: D) -> distributions::DistIter<D, Self, T>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Create an iterator that generates values using the given distribution.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":9853,"byte_end":9857,"line_start":299,"line_end":299,"column_start":8,"column_end":12},"name":"fill","qualname":"::Rng::fill","value":"fn <T> (&mut self, dest: &mut T) -> ()","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random bytes (uniform value distribution),\n where `dest` is any type supporting [`AsByteSliceMut`], namely slices\n and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":10912,"byte_end":10920,"line_start":331,"line_end":331,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::Rng::try_fill","value":"fn <T> (&mut self, dest: &mut T) -> Result<(), Error>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random bytes (uniform value distribution),\n where `dest` is any type supporting [`AsByteSliceMut`], namely slices\n and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":11632,"byte_end":11640,"line_start":357,"line_end":357,"column_start":8,"column_end":16},"name":"gen_bool","qualname":"::Rng::gen_bool","value":"fn (&mut self, p: f64) -> bool","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Return a bool with a probability `p` of being true.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":11615,"byte_end":11624,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":12627,"byte_end":12636,"line_start":386,"line_end":386,"column_start":8,"column_end":17},"name":"gen_ratio","qualname":"::Rng::gen_ratio","value":"fn (&mut self, numerator: u32, denominator: u32) -> bool","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Return a bool with a probability of `numerator/denominator` of being\n true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n returning true. If `numerator == denominator`, then the returned value\n is guaranteed to be `true`. If `numerator == 0`, then the returned\n value is guaranteed to be `false`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":12610,"byte_end":12619,"line_start":385,"line_end":385,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":950},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":12977,"byte_end":12991,"line_start":397,"line_end":397,"column_start":11,"column_end":25},"name":"AsByteSliceMut","qualname":"::AsByteSliceMut","value":"AsByteSliceMut","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952}],"decl_id":null,"docs":" Trait for casting types to byte slices","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":13060,"byte_end":13077,"line_start":399,"line_end":399,"column_start":8,"column_end":25},"name":"as_byte_slice_mut","qualname":"::AsByteSliceMut::as_byte_slice_mut","value":"fn (&mut self) -> &mut [u8]","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" Return a mutable reference to self as a byte slice\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":13190,"byte_end":13195,"line_start":402,"line_end":402,"column_start":8,"column_end":13},"name":"to_le","qualname":"::AsByteSliceMut::to_le","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":958},"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":17343,"byte_end":17349,"line_start":547,"line_end":547,"column_start":8,"column_end":14},"name":"random","qualname":"::random","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Generates a random value using the thread-local random number generator.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":17304,"byte_end":17325,"line_start":545,"line_end":545,"column_start":1,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":17326,"byte_end":17335,"line_start":546,"line_end":546,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":43840,"byte_end":43847,"line_start":173,"line_end":173,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":44635,"byte_end":44642,"line_start":193,"line_end":193,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":47375,"byte_end":47382,"line_start":264,"line_end":264,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":47552,"byte_end":47559,"line_start":270,"line_end":270,"column_start":65,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":48132,"byte_end":48140,"line_start":287,"line_end":287,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":70752,"byte_end":70760,"line_start":835,"line_end":835,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":70826,"byte_end":70841,"line_start":839,"line_end":839,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\bernoulli.rs","byte_start":90065,"byte_end":90074,"line_start":71,"line_end":71,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\bernoulli.rs","byte_start":91741,"byte_end":91750,"line_start":110,"line_end":110,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":105236,"byte_end":105249,"line_start":71,"line_end":71,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":107532,"byte_end":107539,"line_start":133,"line_end":133,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":110718,"byte_end":110731,"line_start":229,"line_end":229,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":111105,"byte_end":111118,"line_start":240,"line_end":240,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":111573,"byte_end":111586,"line_start":255,"line_end":255,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":96989,"byte_end":97002,"line_start":90,"line_end":90,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":98628,"byte_end":98641,"line_start":134,"line_end":134,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":101807,"byte_end":101820,"line_start":223,"line_end":223,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":102215,"byte_end":102228,"line_start":235,"line_end":235,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":102396,"byte_end":102409,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_sphere.rs","byte_start":119773,"byte_end":119790,"line_start":25,"line_end":25,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_sphere.rs","byte_start":119972,"byte_end":119989,"line_start":33,"line_end":33,"column_start":33,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_circle.rs","byte_start":122964,"byte_end":122974,"line_start":26,"line_end":26,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_circle.rs","byte_start":123135,"byte_end":123145,"line_start":34,"line_end":34,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":127743,"byte_end":127748,"line_start":84,"line_end":84,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":128384,"byte_end":128399,"line_start":105,"line_end":105,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":128617,"byte_end":128632,"line_start":114,"line_end":114,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":128870,"byte_end":128875,"line_start":125,"line_end":125,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":129136,"byte_end":129151,"line_start":134,"line_end":134,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":129353,"byte_end":129368,"line_start":141,"line_end":141,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":130716,"byte_end":130726,"line_start":184,"line_end":184,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":131143,"byte_end":131153,"line_start":197,"line_end":197,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":131973,"byte_end":131980,"line_start":225,"line_end":225,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":132447,"byte_end":132454,"line_start":239,"line_end":239,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":132839,"byte_end":132847,"line_start":254,"line_end":254,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":133172,"byte_end":133180,"line_start":265,"line_end":265,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":133582,"byte_end":133586,"line_start":280,"line_end":280,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":133973,"byte_end":133977,"line_start":294,"line_end":294,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":136965,"byte_end":136979,"line_start":33,"line_end":33,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":138594,"byte_end":138600,"line_start":84,"line_end":84,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":139007,"byte_end":139013,"line_start":100,"line_end":100,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":139463,"byte_end":139472,"line_start":118,"line_end":118,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":139878,"byte_end":139887,"line_start":131,"line_end":131,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\exponential.rs","byte_start":142199,"byte_end":142203,"line_start":36,"line_end":36,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\exponential.rs","byte_start":143153,"byte_end":143156,"line_start":68,"line_end":68,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\exponential.rs","byte_start":143464,"byte_end":143467,"line_start":78,"line_end":78,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\pareto.rs","byte_start":144823,"byte_end":144829,"line_start":23,"line_end":23,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\pareto.rs","byte_start":145319,"byte_end":145325,"line_start":38,"line_end":38,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\poisson.rs","byte_start":146935,"byte_end":146942,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\poisson.rs","byte_start":147471,"byte_end":147478,"line_start":48,"line_end":48,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\binomial.rs","byte_start":151981,"byte_end":151989,"line_start":29,"line_end":29,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\binomial.rs","byte_start":152615,"byte_end":152623,"line_start":48,"line_end":48,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\cauchy.rs","byte_start":163121,"byte_end":163127,"line_start":28,"line_end":28,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\cauchy.rs","byte_start":163520,"byte_end":163526,"line_start":41,"line_end":41,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\dirichlet.rs","byte_start":166477,"byte_end":166486,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\dirichlet.rs","byte_start":167292,"byte_end":167301,"line_start":62,"line_end":62,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\triangular.rs","byte_start":169569,"byte_end":169579,"line_start":24,"line_end":24,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\triangular.rs","byte_start":170013,"byte_end":170023,"line_start":41,"line_end":41,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weibull.rs","byte_start":171830,"byte_end":171837,"line_start":23,"line_end":23,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weibull.rs","byte_start":172195,"byte_end":172202,"line_start":35,"line_end":35,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\integer.rs","byte_start":184505,"byte_end":184513,"line_start":22,"line_end":22,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\integer.rs","byte_start":184654,"byte_end":184662,"line_start":29,"line_end":29,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\integer.rs","byte_start":184805,"byte_end":184813,"line_start":36,"line_end":36,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\integer.rs","byte_start":184949,"byte_end":184957,"line_start":43,"line_end":43,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\integer.rs","byte_start":185132,"byte_end":185140,"line_start":51,"line_end":51,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\integer.rs","byte_start":185427,"byte_end":185435,"line_start":61,"line_end":61,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\other.rs","byte_start":190512,"byte_end":190520,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\other.rs","byte_start":191269,"byte_end":191281,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\other.rs","byte_start":192071,"byte_end":192079,"line_start":83,"line_end":83,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\other.rs","byte_start":193260,"byte_end":193268,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\other.rs","byte_start":194503,"byte_end":194511,"line_start":157,"line_end":157,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\other.rs","byte_start":194855,"byte_end":194863,"line_start":169,"line_end":169,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":32188,"byte_end":32196,"line_start":243,"line_end":243,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":32759,"byte_end":32767,"line_start":261,"line_end":261,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\read.rs","byte_start":248157,"byte_end":248164,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\read.rs","byte_start":248338,"byte_end":248345,"line_start":60,"line_end":60,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\read.rs","byte_start":249109,"byte_end":249118,"line_start":85,"line_end":85,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\read.rs","byte_start":249259,"byte_end":249268,"line_start":91,"line_end":91,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":254138,"byte_end":254150,"line_start":83,"line_end":83,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":631},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":254974,"byte_end":254986,"line_start":105,"line_end":105,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":255520,"byte_end":255532,"line_start":128,"line_end":128,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":255856,"byte_end":255868,"line_start":139,"line_end":139,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":256154,"byte_end":256167,"line_start":152,"line_end":152,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":257018,"byte_end":257031,"line_start":174,"line_end":174,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":658},{"krate":0,"index":660},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":259572,"byte_end":259585,"line_start":248,"line_end":248,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":260021,"byte_end":260034,"line_start":263,"line_end":263,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\entropy.rs","byte_start":264049,"byte_end":264059,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\entropy.rs","byte_start":264411,"byte_end":264421,"line_start":40,"line_end":40,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\entropy.rs","byte_start":264503,"byte_end":264513,"line_start":46,"line_end":46,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\entropy.rs","byte_start":264898,"byte_end":264908,"line_start":64,"line_end":64,"column_start":20,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mock.rs","byte_start":266120,"byte_end":266127,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mock.rs","byte_start":266390,"byte_end":266397,"line_start":41,"line_end":41,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\std.rs","byte_start":268465,"byte_end":268471,"line_start":36,"line_end":36,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\std.rs","byte_start":268927,"byte_end":268933,"line_start":58,"line_end":58,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\std.rs","byte_start":269242,"byte_end":269248,"line_start":72,"line_end":72,"column_start":20,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\thread.rs","byte_start":273750,"byte_end":273759,"line_start":86,"line_end":86,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\thread.rs","byte_start":273857,"byte_end":273866,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\thread.rs","byte_start":274363,"byte_end":274372,"line_start":112,"line_end":112,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\os.rs","byte_start":276455,"byte_end":276460,"line_start":52,"line_end":52,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\os.rs","byte_start":276669,"byte_end":276674,"line_start":60,"line_end":60,"column_start":20,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\os.rs","byte_start":276696,"byte_end":276701,"line_start":62,"line_end":62,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":306260,"byte_end":306268,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":307717,"byte_end":307725,"line_start":76,"line_end":76,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":308285,"byte_end":308293,"line_start":90,"line_end":90,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":308391,"byte_end":308399,"line_start":96,"line_end":96,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":791}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":308678,"byte_end":308690,"line_start":109,"line_end":109,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":309206,"byte_end":309218,"line_start":127,"line_end":127,"column_start":32,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":309434,"byte_end":309450,"line_start":136,"line_end":136,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":309957,"byte_end":309973,"line_start":156,"line_end":156,"column_start":28,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":293994,"byte_end":293995,"line_start":478,"line_end":478,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":294497,"byte_end":294512,"line_start":494,"line_end":494,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":294964,"byte_end":294979,"line_start":509,"line_end":509,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":12845,"byte_end":12846,"line_start":392,"line_end":392,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":2999,"byte_end":3012,"line_start":100,"line_end":100,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":24}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":28703,"byte_end":28710,"line_start":140,"line_end":140,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":60}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":28759,"byte_end":28767,"line_start":142,"line_end":142,"column_start":33,"column_end":41},"ref_id":{"krate":0,"index":140}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":94175,"byte_end":94187,"line_start":19,"line_end":19,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":141}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":3022,"byte_end":3029,"line_start":101,"line_end":101,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":579}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":3039,"byte_end":3043,"line_start":102,"line_end":102,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":594}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mod.rs","byte_start":245495,"byte_end":245502,"line_start":101,"line_end":101,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":595}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mod.rs","byte_start":245548,"byte_end":245552,"line_start":104,"line_end":104,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":692}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":3053,"byte_end":3056,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":764}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":278384,"byte_end":278389,"line_start":28,"line_end":28,"column_start":33,"column_end":38},"ref_id":{"krate":0,"index":765}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":43840,"byte_end":43847,"line_start":173,"line_end":173,"column_start":24,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":44635,"byte_end":44642,"line_start":193,"line_end":193,"column_start":44,"column_end":51},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":960},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":45062,"byte_end":45067,"line_start":206,"line_end":206,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1442},"to":{"krate":0,"index":82}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":45642,"byte_end":45647,"line_start":221,"line_end":221,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1442},"to":{"krate":0,"index":84}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":47375,"byte_end":47382,"line_start":264,"line_end":264,"column_start":56,"column_end":63},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":960},"to":{"krate":2,"index":2096}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":47552,"byte_end":47559,"line_start":270,"line_end":270,"column_start":65,"column_end":72},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":960},"to":{"krate":2,"index":2096}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":48132,"byte_end":48140,"line_start":287,"line_end":287,"column_start":43,"column_end":51},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":108},"to":{"krate":0,"index":104}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":70752,"byte_end":70760,"line_start":835,"line_end":835,"column_start":24,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":2,"index":34834},"to":{"krate":0,"index":82}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\uniform.rs","byte_start":70826,"byte_end":70841,"line_start":839,"line_end":839,"column_start":25,"column_end":40},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1220},"to":{"krate":0,"index":84}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\bernoulli.rs","byte_start":90065,"byte_end":90074,"line_start":71,"line_end":71,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1243},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\bernoulli.rs","byte_start":91741,"byte_end":91750,"line_start":110,"line_end":110,"column_start":29,"column_end":38},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1243},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":105236,"byte_end":105249,"line_start":71,"line_end":71,"column_start":17,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":107532,"byte_end":107539,"line_start":133,"line_end":133,"column_start":14,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":169},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":110718,"byte_end":110731,"line_start":229,"line_end":229,"column_start":41,"column_end":54},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":158},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":111105,"byte_end":111118,"line_start":240,"line_end":240,"column_start":32,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":158},"to":{"krate":2,"index":6831}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":111573,"byte_end":111586,"line_start":255,"line_end":255,"column_start":27,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":158},"to":{"krate":2,"index":2056}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112149,"byte_end":112154,"line_start":273,"line_end":273,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1442},"to":{"krate":0,"index":192}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112161,"byte_end":112165,"line_start":274,"line_end":274,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1445},"to":{"krate":0,"index":192}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112172,"byte_end":112185,"line_start":275,"line_end":275,"column_start":7,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":82},"to":{"krate":0,"index":192}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112192,"byte_end":112202,"line_start":276,"line_end":276,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1970},"to":{"krate":0,"index":192}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112209,"byte_end":112212,"line_start":277,"line_end":277,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1493},"to":{"krate":0,"index":192}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112234,"byte_end":112243,"line_start":278,"line_end":278,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1526},"to":{"krate":0,"index":192}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112250,"byte_end":112253,"line_start":279,"line_end":279,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1498},"to":{"krate":0,"index":192}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112275,"byte_end":112284,"line_start":280,"line_end":280,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1530},"to":{"krate":0,"index":192}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112291,"byte_end":112294,"line_start":281,"line_end":281,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1503},"to":{"krate":0,"index":192}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112316,"byte_end":112325,"line_start":282,"line_end":282,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1534},"to":{"krate":0,"index":192}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112332,"byte_end":112335,"line_start":283,"line_end":283,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1508},"to":{"krate":0,"index":192}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112357,"byte_end":112366,"line_start":284,"line_end":284,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1538},"to":{"krate":0,"index":192}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\alias_method.rs","byte_start":112373,"byte_end":112376,"line_start":285,"line_end":285,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3413},"to":{"krate":0,"index":192}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":96989,"byte_end":97002,"line_start":90,"line_end":90,"column_start":37,"column_end":50},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1320},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":98628,"byte_end":98641,"line_start":134,"line_end":134,"column_start":33,"column_end":46},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1320},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":101807,"byte_end":101820,"line_start":223,"line_end":223,"column_start":6,"column_end":19},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":102215,"byte_end":102228,"line_start":235,"line_end":235,"column_start":30,"column_end":43},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1330},"to":{"krate":1,"index":1542}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weighted\\mod.rs","byte_start":102396,"byte_end":102409,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1330},"to":{"krate":2,"index":6833}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_sphere.rs","byte_start":119773,"byte_end":119790,"line_start":25,"line_end":25,"column_start":6,"column_end":23},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_sphere.rs","byte_start":119972,"byte_end":119989,"line_start":33,"line_end":33,"column_start":33,"column_end":50},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1348},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_circle.rs","byte_start":122964,"byte_end":122974,"line_start":26,"line_end":26,"column_start":6,"column_end":16},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1355},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\unit_circle.rs","byte_start":123135,"byte_end":123145,"line_start":34,"line_end":34,"column_start":33,"column_end":43},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1355},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":127743,"byte_end":127748,"line_start":84,"line_end":84,"column_start":6,"column_end":11},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":128384,"byte_end":128399,"line_start":105,"line_end":105,"column_start":6,"column_end":21},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":128617,"byte_end":128632,"line_start":114,"line_end":114,"column_start":6,"column_end":21},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1392},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":128870,"byte_end":128875,"line_start":125,"line_end":125,"column_start":28,"column_end":33},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1362},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":129136,"byte_end":129151,"line_start":134,"line_end":134,"column_start":28,"column_end":43},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1384},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":129353,"byte_end":129368,"line_start":141,"line_end":141,"column_start":28,"column_end":43},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1392},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":130716,"byte_end":130726,"line_start":184,"line_end":184,"column_start":6,"column_end":16},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1401},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":131143,"byte_end":131153,"line_start":197,"line_end":197,"column_start":28,"column_end":38},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1401},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":131973,"byte_end":131980,"line_start":225,"line_end":225,"column_start":6,"column_end":13},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":132447,"byte_end":132454,"line_start":239,"line_end":239,"column_start":28,"column_end":35},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1419},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":132839,"byte_end":132847,"line_start":254,"line_end":254,"column_start":6,"column_end":14},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":133172,"byte_end":133180,"line_start":265,"line_end":265,"column_start":28,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1428},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":133582,"byte_end":133586,"line_start":280,"line_end":280,"column_start":6,"column_end":10},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1436},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\gamma.rs","byte_start":133973,"byte_end":133977,"line_start":294,"line_end":294,"column_start":28,"column_end":32},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1436},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":136965,"byte_end":136979,"line_start":33,"line_end":33,"column_start":28,"column_end":42},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1444},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":138594,"byte_end":138600,"line_start":84,"line_end":84,"column_start":6,"column_end":12},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":139007,"byte_end":139013,"line_start":100,"line_end":100,"column_start":28,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1451},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":139463,"byte_end":139472,"line_start":118,"line_end":118,"column_start":6,"column_end":15},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1459},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\normal.rs","byte_start":139878,"byte_end":139887,"line_start":131,"line_end":131,"column_start":28,"column_end":37},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1459},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\exponential.rs","byte_start":142199,"byte_end":142203,"line_start":36,"line_end":36,"column_start":28,"column_end":32},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1466},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\exponential.rs","byte_start":143153,"byte_end":143156,"line_start":68,"line_end":68,"column_start":6,"column_end":9},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1473},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\exponential.rs","byte_start":143464,"byte_end":143467,"line_start":78,"line_end":78,"column_start":28,"column_end":31},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1473},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\pareto.rs","byte_start":144823,"byte_end":144829,"line_start":23,"line_end":23,"column_start":6,"column_end":12},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1480},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\pareto.rs","byte_start":145319,"byte_end":145325,"line_start":38,"line_end":38,"column_start":28,"column_end":34},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1480},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\poisson.rs","byte_start":146935,"byte_end":146942,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\poisson.rs","byte_start":147471,"byte_end":147478,"line_start":48,"line_end":48,"column_start":28,"column_end":35},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1488},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\binomial.rs","byte_start":151981,"byte_end":151989,"line_start":29,"line_end":29,"column_start":6,"column_end":14},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\binomial.rs","byte_start":152615,"byte_end":152623,"line_start":48,"line_end":48,"column_start":28,"column_end":36},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1499},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\cauchy.rs","byte_start":163121,"byte_end":163127,"line_start":28,"line_end":28,"column_start":6,"column_end":12},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\cauchy.rs","byte_start":163520,"byte_end":163526,"line_start":41,"line_end":41,"column_start":28,"column_end":34},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1507},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\dirichlet.rs","byte_start":166477,"byte_end":166486,"line_start":29,"line_end":29,"column_start":6,"column_end":15},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1515},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\dirichlet.rs","byte_start":167292,"byte_end":167301,"line_start":62,"line_end":62,"column_start":33,"column_end":42},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1515},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\triangular.rs","byte_start":169569,"byte_end":169579,"line_start":24,"line_end":24,"column_start":6,"column_end":16},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1521},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\triangular.rs","byte_start":170013,"byte_end":170023,"line_start":41,"line_end":41,"column_start":28,"column_end":38},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1521},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weibull.rs","byte_start":171830,"byte_end":171837,"line_start":23,"line_end":23,"column_start":6,"column_end":13},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\weibull.rs","byte_start":172195,"byte_end":172202,"line_start":35,"line_end":35,"column_start":28,"column_end":35},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1530},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\integer.rs","byte_start":184505,"byte_end":184513,"line_start":22,"line_end":22,"column_start":27,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1999},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\integer.rs","byte_start":184654,"byte_end":184662,"line_start":29,"line_end":29,"column_start":28,"column_end":36},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1999},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\integer.rs","byte_start":184805,"byte_end":184813,"line_start":36,"line_end":36,"column_start":28,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1999},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\integer.rs","byte_start":184949,"byte_end":184957,"line_start":43,"line_end":43,"column_start":28,"column_end":36},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1999},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\integer.rs","byte_start":185132,"byte_end":185140,"line_start":51,"line_end":51,"column_start":29,"column_end":37},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1999},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\integer.rs","byte_start":185427,"byte_end":185435,"line_start":61,"line_end":61,"column_start":30,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1999},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\other.rs","byte_start":190512,"byte_end":190520,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1999},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\other.rs","byte_start":191269,"byte_end":191281,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1614},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\other.rs","byte_start":192071,"byte_end":192079,"line_start":83,"line_end":83,"column_start":29,"column_end":37},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1999},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\other.rs","byte_start":193260,"byte_end":193268,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1999},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\other.rs","byte_start":194503,"byte_end":194511,"line_start":157,"line_end":157,"column_start":37,"column_end":45},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1999},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\other.rs","byte_start":194855,"byte_end":194863,"line_start":169,"line_end":169,"column_start":39,"column_end":47},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1999},"to":{"krate":0,"index":556}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\utils.rs","byte_start":204899,"byte_end":204904,"line_start":251,"line_end":251,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1442},"to":{"krate":0,"index":515}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\utils.rs","byte_start":205204,"byte_end":205209,"line_start":262,"line_end":262,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1442},"to":{"krate":0,"index":522}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\utils.rs","byte_start":205591,"byte_end":205596,"line_start":273,"line_end":273,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1442},"to":{"krate":0,"index":527}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":32188,"byte_end":32196,"line_start":243,"line_end":243,"column_start":28,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1987},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\distributions\\mod.rs","byte_start":32759,"byte_end":32767,"line_start":261,"line_end":261,"column_start":39,"column_end":47},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1987},"to":{"krate":2,"index":3491}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\read.rs","byte_start":248157,"byte_end":248164,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2006},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\read.rs","byte_start":248338,"byte_end":248345,"line_start":60,"line_end":60,"column_start":27,"column_end":34},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2006},"to":{"krate":16,"index":131}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\read.rs","byte_start":249109,"byte_end":249118,"line_start":85,"line_end":85,"column_start":23,"column_end":32},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2012},"to":{"krate":2,"index":6833}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\read.rs","byte_start":249259,"byte_end":249268,"line_start":91,"line_end":91,"column_start":28,"column_end":37},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2012},"to":{"krate":1,"index":1542}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":254138,"byte_end":254150,"line_start":83,"line_end":83,"column_start":15,"column_end":27},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2017},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":254974,"byte_end":254986,"line_start":105,"line_end":105,"column_start":36,"column_end":48},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2017},"to":{"krate":16,"index":131}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":255520,"byte_end":255532,"line_start":128,"line_end":128,"column_start":25,"column_end":37},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2017},"to":{"krate":2,"index":2056}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":255856,"byte_end":255868,"line_start":139,"line_end":139,"column_start":29,"column_end":41},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2017},"to":{"krate":16,"index":136}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":256154,"byte_end":256167,"line_start":152,"line_end":152,"column_start":32,"column_end":45},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2026},"to":{"krate":16,"index":53}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":257018,"byte_end":257031,"line_start":174,"line_end":174,"column_start":15,"column_end":28},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2026},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":259572,"byte_end":259585,"line_start":248,"line_end":248,"column_start":25,"column_end":38},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2026},"to":{"krate":2,"index":2056}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\adapter\\reseeding.rs","byte_start":260021,"byte_end":260034,"line_start":263,"line_end":263,"column_start":29,"column_end":42},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2026},"to":{"krate":16,"index":136}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\entropy.rs","byte_start":264049,"byte_end":264059,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2038},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\entropy.rs","byte_start":264411,"byte_end":264421,"line_start":40,"line_end":40,"column_start":18,"column_end":28},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2038},"to":{"krate":2,"index":2080}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\entropy.rs","byte_start":264503,"byte_end":264513,"line_start":46,"line_end":46,"column_start":18,"column_end":28},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2038},"to":{"krate":16,"index":131}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\entropy.rs","byte_start":264898,"byte_end":264908,"line_start":64,"line_end":64,"column_start":20,"column_end":30},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2038},"to":{"krate":16,"index":136}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mock.rs","byte_start":266120,"byte_end":266127,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2042},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\mock.rs","byte_start":266390,"byte_end":266397,"line_start":41,"line_end":41,"column_start":18,"column_end":25},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2042},"to":{"krate":16,"index":131}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\std.rs","byte_start":268465,"byte_end":268471,"line_start":36,"line_end":36,"column_start":18,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2049},"to":{"krate":16,"index":131}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\std.rs","byte_start":268927,"byte_end":268933,"line_start":58,"line_end":58,"column_start":22,"column_end":28},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2049},"to":{"krate":16,"index":137}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\std.rs","byte_start":269242,"byte_end":269248,"line_start":72,"line_end":72,"column_start":20,"column_end":26},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2049},"to":{"krate":16,"index":136}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\thread.rs","byte_start":273750,"byte_end":273759,"line_start":86,"line_end":86,"column_start":18,"column_end":27},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2056},"to":{"krate":2,"index":2080}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\thread.rs","byte_start":273857,"byte_end":273866,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2056},"to":{"krate":16,"index":131}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\thread.rs","byte_start":274363,"byte_end":274372,"line_start":112,"line_end":112,"column_start":20,"column_end":29},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2056},"to":{"krate":16,"index":136}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\os.rs","byte_start":276455,"byte_end":276460,"line_start":52,"line_end":52,"column_start":6,"column_end":11},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2068},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\os.rs","byte_start":276669,"byte_end":276674,"line_start":60,"line_end":60,"column_start":20,"column_end":25},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2068},"to":{"krate":16,"index":136}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\rngs\\os.rs","byte_start":276696,"byte_end":276701,"line_start":62,"line_end":62,"column_start":18,"column_end":23},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2068},"to":{"krate":16,"index":131}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":306260,"byte_end":306268,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2077},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":307717,"byte_end":307725,"line_start":76,"line_end":76,"column_start":20,"column_end":28},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2077},"to":{"krate":2,"index":1936}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":308285,"byte_end":308293,"line_start":90,"line_end":90,"column_start":25,"column_end":33},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2077},"to":{"krate":2,"index":2096}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":308391,"byte_end":308399,"line_start":96,"line_end":96,"column_start":27,"column_end":35},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2077},"to":{"krate":2,"index":2096}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":308678,"byte_end":308690,"line_start":109,"line_end":109,"column_start":23,"column_end":35},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":309206,"byte_end":309218,"line_start":127,"line_end":127,"column_start":32,"column_end":44},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2088},"to":{"krate":2,"index":3380}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":309434,"byte_end":309450,"line_start":136,"line_end":136,"column_start":19,"column_end":35},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2099},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":309957,"byte_end":309973,"line_start":156,"line_end":156,"column_start":28,"column_end":44},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2099},"to":{"krate":2,"index":3380}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":315071,"byte_end":315075,"line_start":286,"line_end":286,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1445},"to":{"krate":0,"index":821}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":315078,"byte_end":315088,"line_start":286,"line_end":286,"column_start":20,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1970},"to":{"krate":0,"index":821}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":315091,"byte_end":315094,"line_start":286,"line_end":286,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1960},"to":{"krate":0,"index":821}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":315097,"byte_end":315106,"line_start":286,"line_end":286,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":1936},"to":{"krate":0,"index":821}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":315109,"byte_end":315111,"line_start":286,"line_end":286,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":1940},"to":{"krate":0,"index":821}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":315114,"byte_end":315127,"line_start":286,"line_end":286,"column_start":56,"column_end":69},"kind":"SuperTrait","from":{"krate":0,"index":82},"to":{"krate":0,"index":821}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\index.rs","byte_start":315142,"byte_end":315146,"line_start":286,"line_end":286,"column_start":84,"column_end":88},"kind":"SuperTrait","from":{"krate":2,"index":6488},"to":{"krate":0,"index":821}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":285763,"byte_end":285771,"line_start":241,"line_end":241,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3202},"to":{"krate":0,"index":863}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":285774,"byte_end":285779,"line_start":241,"line_end":241,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":1442},"to":{"krate":0,"index":863}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":293994,"byte_end":293995,"line_start":478,"line_end":478,"column_start":28,"column_end":29},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":902},"to":{"krate":0,"index":863}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":294497,"byte_end":294512,"line_start":494,"line_end":494,"column_start":73,"column_end":88},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2110},"to":{"krate":2,"index":3202}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\seq\\mod.rs","byte_start":294964,"byte_end":294979,"line_start":509,"line_end":509,"column_start":9,"column_end":24},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2110},"to":{"krate":2,"index":3380}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":4777,"byte_end":4784,"line_start":148,"line_end":148,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":16,"index":131},"to":{"krate":0,"index":929}},{"span":{"file_name":"C:\\Users\\Alex\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.0\\src\\lib.rs","byte_start":12845,"byte_end":12846,"line_start":392,"line_end":392,"column_start":35,"column_end":36},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":949},"to":{"krate":0,"index":929}}]}